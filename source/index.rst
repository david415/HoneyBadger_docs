
HoneyBadger
===========

.. image:: images/honey_badger-white-sm-1.png
|
.. image:: https://drone.io/github.com/david415/HoneyBadger/status.png
  :target: https://drone.io/github.com/david415/HoneyBadger/latest

.. image:: https://coveralls.io/repos/david415/HoneyBadger/badge.svg?branch=master
  :target: https://coveralls.io/r/david415/HoneyBadger?branch=master 

.. image:: https://api.flattr.com/button/flattr-badge-large.png
  :target: https://flattr.com/submit/auto?user_id=david415&url=https%3A%2F%2Fgithub.com%2Fdavid415%2FHoneyBadger
|

**TCP attack inquisitor and 0-day catcher.**

HoneyBadger is a comprehensive TCP stream analysis tool for detecting and recording TCP attacks.
HoneyBadger includes a variety of TCP stream injections attacks which will prove that the TCP attack detection is reliable.
HoneyBadger is modern software written in Golang to deal with TCP's very olde security issues.
It is free software, using the GPLv3 and the source code is available on github:

* https://github.com/david415/HoneyBadger


development status
------------------

Current master branch is a working proof of concept but is not yet stable and
only some features have been implemented.


I'm currently working on adding out-of-order stream segment reordering
and coalesce injection detection.


how does HoneyBadger work?
==========================


data flow
---------

HoneyBadger passively reads packets off a network interface or a pcap file and if detection is triggered writes
TCP attack reports, pcap packet log files and reasembled TCP streams.

Here's a data flow diagram I quickly created to show some of the main components of the pipeline.
It's not pretty... I want to learn R and make prettier graphs soon.

.. image:: images/honeybadger_dfd1.png
|

TCP injection attacks
---------------------

1. handshake hijack: the attacker responds to a SYN packet with their SYN/ACK packet before the legit server.

2. segment veto: the injected packet(s) are the exact same size as those sent out by the legit party. Client and server remain in sync.

3. sloppy injection: the injected packet(s) are different sizes than that of the legit party. Client and server fall out of sync.

4. out-of-order coalesce injection: injected packets are ahead of the next sequence. Injection of data takes place during coalescence.

Each of these TCP attacks are really broader categories of attack... for instance sloppy injection that gradually brings client and server back
into sequence synchronization. Furthermore it should be possible for the out-of-order coalesce injection to have varied results depending on the
TCP stack. If we want to successfully capture the injection payload then we might have to create partial TCP stack emulation of various platforms.


attack detection
----------------

Handshake hijack is fairly simple to detect once you can track the state changes of the TCP handshake... so I won't bother explaining
it here. Segment veto and sloppy injection attacks are detected by means of a retrospective analysis.
The endpoint of the TCP connection that receives the attack will also receive a packet from the legitimate
connection party. That packet's TCP segment will overlap with a previously transmitted stream segment.
Such an overlapping TCP stream segment could be due to a TCP retransmission.
Therefore to distinguish it as an injection attack we compare the overlapping stream segments of the new packet versus the previously assembly
TCP stream. If they are different then it's an injection attack. If they are equal then it's a TCP retransmission.

In principal HoneyBadger of course **cannot** determine which packet
was sent by an attacker and which was sent by the legit connection party. However we speculate that in the wild, injected packets
will have interesting and varying TTLs! This and other header parameters might make it possible to develop some heuristics for distinguishing
injected packets. That speculation aside... HoneyBadger's priority is to detect and record TCP attack attempts with the utmost precision.



autogenerated API documentation
-------------------------------
https://godoc.org/github.com/david415/HoneyBadger



manual "integration test" with netcat
=====================================

abstract
--------

This manual testing procedure proves that HoneyBadger's TCP injection detection is solid!
It only takes a few minutes to perform... and thus I highly recommend it to new users for
two reasons

1. to raise awareness about how insecure TCP is

2. to give you confidence that HoneyBadger has reliable TCP attack detection functionality


procedure
---------

1. build honey_badger.go and spray_injector.go (located in the tools directory in the source repository)

2. run **honey_badger** with these arguments... Note we are telling honey_badger to write log files to the current working directory.

  .. code-block:: bash

    ./honey_badger -i=lo -f="tcp port 9666"  -l="."

3. run **spray_injector** with these arguments

  .. code-block:: bash

    ./spray_injector -d=127.0.0.1 -e=9666 -f="tcp" -i=lo

4. start the netcat server

  .. code-block:: bash

    nc -l -p 9666

5. start the netcat client

  .. code-block:: bash

    nc 127.0.0.1 9666

6. In this next step we enter some data on the netcat server so that it will send it to the netcat client that is connected until the spray_injector prints a log message containing "packet spray sent!" In that cause the TCP connection will have been sloppily injected.

7. Look for the log files in honey_badger's working directory. You should see two files beginning with "127.0.0.1"; the pcap file is a full packet log of that TCP connection which you can easily view in Wireshark et al. The JSON file contains attack reports. This is various peices of information relevant to each TCP injection attack. The **spray_injector** tends to produce several injections... and does so sloppily in regards to keeping the client and server synchronized.

  .. code-block:: none

    $ ls 127*
    127.0.0.1:43716-127.0.0.1:9666.pcap  127.0.0.1:9666-127.0.0.1:43716.attackreport.json


It's what you'd expect... the pcap file can be viewed and analyzed in Wireshark and other similar tools.
The *127.0.0.1:9666-127.0.0.1:43716.attackreport.json* file contains JSON report structures.
The attack reports contains important information that is highly relevant to your interests such as:

  * type of TCP injection attack
  * flow of attack (meaning srcip:srcport-dstip:dstport)
  * time of attack
  * payload of packet with overlaping stream segment (in base64 format)
  * previously assembled stream segment that overlaps with packet payload (in base64 format)
  * TCP sequence of packet
  * end sequence of packet
  * overlap start offset is the number of bytes from the beginning of the packet payload that we have available among the reassembled stream segments for retrospective analysis
  * overlap end offset is the number of bytes from the end of the packet payload that we have in our reassembled stream segments...

https://godoc.org/github.com/david415/HoneyBadger#AttackReport


::

    $ cat 127.0.0.1:9666-127.0.0.1:43716.attackreport.json
    {"Type":"injection","Flow":"127.0.0.1:9666-127.0.0.1:43716","Time":"2015-01-30T08:38:14.378603859Z","Payload":"bWVvd21lb3dtZW93","Overlap":"aHJzCg==","StartSequence":831278445,"EndSequence":831278456,"OverlapStart":0,"OverlapEnd":4}
    {"Type":"injection","Flow":"127.0.0.1:9666-127.0.0.1:43716","Time":"2015-01-30T08:38:14.379005763Z","Payload":"bWVvd21lb3dtZW93","Overlap":"cnMK","StartSequence":831278446,"EndSequence":831278457,"OverlapStart":0,"OverlapEnd":3}
    ...


|
|
|

.. image:: images/honey_badger-white-sm-1.png
